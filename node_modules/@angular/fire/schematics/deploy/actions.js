"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const functions_templates_1 = require("./functions-templates");
const schematics_1 = require("@angular-devkit/schematics");
const semver_1 = require("semver");
const moveSync = (src, dest) => {
    fs_extra_1.copySync(src, dest);
    fs_extra_1.removeSync(src);
};
const deployToHosting = (firebaseTools, context, workspaceRoot) => {
    return firebaseTools.deploy({
        only: "hosting:" + context.target.project,
        cwd: workspaceRoot
    });
};
const defaultFsHost = {
    moveSync,
    writeFileSync: fs_1.writeFileSync,
    renameSync: fs_1.renameSync
};
const getVersionRange = (v) => `^${v}.0.0`;
const getPackageJson = (workspaceRoot) => {
    const versions = {
        'firebase-admin': 'latest',
        'firebase-functions': 'latest',
        'firebase-functions-test': 'latest'
    };
    if (fs_1.existsSync(path_1.join(workspaceRoot, 'package.json'))) {
        try {
            const content = JSON.parse(fs_1.readFileSync(path_1.join(workspaceRoot, 'package.json')).toString());
            Object.keys(versions).forEach((p) => {
                versions[p] = content.devDependencies[p] || content.dependencies[p] || versions[p];
            });
        }
        catch (_a) { }
    }
    return functions_templates_1.defaultPackage(versions["firebase-admin"], versions["firebase-functions"], versions["firebase-functions-test"]);
};
exports.deployToFunction = (firebaseTools, context, workspaceRoot, project, preview, fsHost = defaultFsHost) => __awaiter(void 0, void 0, void 0, function* () {
    if (!semver_1.satisfies(process.versions.node, getVersionRange(functions_templates_1.NodeVersion))) {
        context.logger.warn(`‚ö†Ô∏è Your Node.js version (${process.versions.node}) does not match the Firebase Functions runtime (${functions_templates_1.NodeVersion}).`);
    }
    if (!project ||
        !project.build ||
        !project.build.options ||
        !project.build.options.outputPath) {
        throw new schematics_1.SchematicsException(`Cannot read the output path (architect.build.options.outputPath) of the Angular project in angular.json`);
    }
    if (!project ||
        !project.server ||
        !project.server.options ||
        !project.server.options.outputPath) {
        throw new schematics_1.SchematicsException(`Cannot read the output path (architect.server.options.outputPath) of the Angular project in angular.json`);
    }
    const staticOut = project.build.options.outputPath;
    const serverOut = project.server.options.outputPath;
    const newClientPath = path_1.join(path_1.dirname(staticOut), staticOut);
    const newServerPath = path_1.join(path_1.dirname(serverOut), serverOut);
    fsHost.moveSync(staticOut, newClientPath);
    fsHost.moveSync(serverOut, newServerPath);
    fsHost.writeFileSync(path_1.join(path_1.dirname(serverOut), "package.json"), getPackageJson(workspaceRoot));
    fsHost.writeFileSync(path_1.join(path_1.dirname(serverOut), "index.js"), functions_templates_1.defaultFunction(serverOut));
    fsHost.renameSync(path_1.join(newClientPath, "index.html"), path_1.join(newClientPath, "index.original.html"));
    context.logger.info("Deploying your Angular Universal application...");
    if (preview) {
        context.logger.info("Your Universal application is now ready for preview. Use `firebase serve` in the output directory of your workspace to test the setup.");
        return Promise.resolve();
    }
    else {
        return firebaseTools.deploy({
            cwd: workspaceRoot
        });
    }
});
function deploy(firebaseTools, context, projectTargets, buildTargets, firebaseProject, ssr, preview) {
    return __awaiter(this, void 0, void 0, function* () {
        yield firebaseTools.login();
        if (!context.target) {
            throw new Error("Cannot execute the build target");
        }
        context.logger.info(`üì¶ Building "${context.target.project}"`);
        for (const target of buildTargets) {
            const run = yield context.scheduleTarget(architect_1.targetFromTargetString(target.name), target.options);
            yield run.result;
        }
        try {
            yield firebaseTools.use(firebaseProject, { project: firebaseProject });
        }
        catch (e) {
            throw new Error(`Cannot select firebase project '${firebaseProject}'`);
        }
        try {
            let success;
            if (ssr) {
                success = yield exports.deployToFunction(firebaseTools, context, context.workspaceRoot, projectTargets, preview);
            }
            else {
                success = yield deployToHosting(firebaseTools, context, context.workspaceRoot);
            }
            if (!preview) {
                context.logger.info(`üöÄ Your application is now available at https://${success.hosting.split("/")[1]}.firebaseapp.com/`);
            }
        }
        catch (e) {
            context.logger.error(e.message || e);
        }
    });
}
exports.default = deploy;
